// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Legend /> should render a legend 1`] = `
<Legend
  datasets={
    Array [
      Object {
        "colour": "rgb(0,255,0)",
        "label": "I am the green dataset",
      },
      Object {
        "colour": "rgb(0,0,255)",
        "label": "I am BLUE!",
      },
    ]
  }
>
  <styled.ul>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htpNat",
            "isStatic": true,
            "lastClassName": "eydzFE",
            "rules": Array [
              "
  margin: 0;
  padding: 0;

  li {
    align-items: center;
    display: flex;
    font-size: .8rem;
    margin-bottom: 3px;

    &:last-child {
      margin-bottom: 0;
    }

    i {
      font-size: 10px;
    }
  }
",
            ],
          },
          "displayName": "styled.ul",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htpNat",
          "target": "ul",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <ul
        className="eydzFE"
      >
        <li
          key="0"
        >
          <FontAwesomeIcon
            color="rgb(0,255,0)"
            size="xsmall"
            type="circle"
          >
            <Icon
              color="rgb(0,255,0)"
              isSpinning={false}
              size="xsmall"
              type="fa-circle"
            >
              <styled.i
                aria-hidden={true}
                className="icon fa fa-circle"
                color="rgb(0,255,0)"
                size="xsmall"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="icon fa fa-circle"
                  color="rgb(0,255,0)"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bwzfXH",
                        "isStatic": false,
                        "lastClassName": "fmvdLz",
                        "rules": Array [
                          "
   width: 1.28571em;

  ",
                          [Function],
                          "

  &.icon {
    text-align: center;

  ",
                          [Function],
                          "
  }
",
                        ],
                      },
                      "displayName": "styled.i",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bwzfXH",
                      "target": "i",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  size="xsmall"
                >
                  <i
                    aria-hidden={true}
                    className="icon fa fa-circle cKoKge"
                    color="rgb(0,255,0)"
                    size="xsmall"
                  />
                </StyledComponent>
              </styled.i>
            </Icon>
          </FontAwesomeIcon>
          <styled.span>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bxivhb",
                    "isStatic": true,
                    "lastClassName": "fWsUlI",
                    "rules": Array [
                      "
  margin-left: 5px;
  white-space: nowrap;
  width: 100%;
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bxivhb",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <span
                className="fWsUlI"
              >
                I am the green dataset
              </span>
            </StyledComponent>
          </styled.span>
        </li>
        <li
          key="1"
        >
          <FontAwesomeIcon
            color="rgb(0,0,255)"
            size="xsmall"
            type="circle"
          >
            <Icon
              color="rgb(0,0,255)"
              isSpinning={false}
              size="xsmall"
              type="fa-circle"
            >
              <styled.i
                aria-hidden={true}
                className="icon fa fa-circle"
                color="rgb(0,0,255)"
                size="xsmall"
              >
                <StyledComponent
                  aria-hidden={true}
                  className="icon fa fa-circle"
                  color="rgb(0,0,255)"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bwzfXH",
                        "isStatic": false,
                        "lastClassName": "fmvdLz",
                        "rules": Array [
                          "
   width: 1.28571em;

  ",
                          [Function],
                          "

  &.icon {
    text-align: center;

  ",
                          [Function],
                          "
  }
",
                        ],
                      },
                      "displayName": "styled.i",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bwzfXH",
                      "target": "i",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  size="xsmall"
                >
                  <i
                    aria-hidden={true}
                    className="icon fa fa-circle fmvdLz"
                    color="rgb(0,0,255)"
                    size="xsmall"
                  />
                </StyledComponent>
              </styled.i>
            </Icon>
          </FontAwesomeIcon>
          <styled.span>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bxivhb",
                    "isStatic": true,
                    "lastClassName": "fWsUlI",
                    "rules": Array [
                      "
  margin-left: 5px;
  white-space: nowrap;
  width: 100%;
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bxivhb",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <span
                className="fWsUlI"
              >
                I am BLUE!
              </span>
            </StyledComponent>
          </styled.span>
        </li>
      </ul>
    </StyledComponent>
  </styled.ul>
</Legend>
`;

exports[`<Legend /> should render null if there is no data provided 1`] = `
<Legend
  datasets={Array []}
/>
`;
