// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TextSkeleton /> should render a text skeleton 1`] = `
<TextSkeleton
  showSkeleton={true}
  type="body"
>
  <styled.span
    textType="body"
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "lastClassName": "fsJqtE",
            "rules": Array [
              "
  border-radius: 4px;
  width: ",
              [Function],
              ";
  margin-top: 0.5rem;
  margin-bottom: 0.5rem;
  ",
              [Function],
              ";
  ",
              [Function],
              ";
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      textType="body"
    >
      <span
        className="fsJqtE"
      >
        ‌
      </span>
    </StyledComponent>
  </styled.span>
</TextSkeleton>
`;

exports[`<TextSkeleton /> should render a text skeleton with set type 1`] = `
<TextSkeleton
  showSkeleton={true}
  type="display"
>
  <styled.span
    textType="display"
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "lastClassName": "dcJPYZ",
            "rules": Array [
              "
  border-radius: 4px;
  width: ",
              [Function],
              ";
  margin-top: 0.5rem;
  margin-bottom: 0.5rem;
  ",
              [Function],
              ";
  ",
              [Function],
              ";
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      textType="display"
    >
      <span
        className="dcJPYZ"
      >
        ‌
      </span>
    </StyledComponent>
  </styled.span>
</TextSkeleton>
`;

exports[`<TextSkeleton /> should render a text skeleton with set width 1`] = `
<TextSkeleton
  showSkeleton={true}
  type="body"
  width={250}
>
  <styled.span
    textType="body"
    width="250px"
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "lastClassName": "cRKbsz",
            "rules": Array [
              "
  border-radius: 4px;
  width: ",
              [Function],
              ";
  margin-top: 0.5rem;
  margin-bottom: 0.5rem;
  ",
              [Function],
              ";
  ",
              [Function],
              ";
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      textType="body"
      width="250px"
    >
      <span
        className="cRKbsz"
        width="250px"
      >
        ‌
      </span>
    </StyledComponent>
  </styled.span>
</TextSkeleton>
`;
