// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<BlockSkeleton /> should render a block skeleton 1`] = `
<BlockSkeleton
  showSkeleton={true}
>
  <Styled(styled.span)>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "ldvstH",
            "rules": Array [
              "
  animation: ",
              Keyframes {
                "id": "sc-keyframes-jXsTbE",
                "inject": [Function],
                "name": "jXsTbE",
                "rules": Array [
                  "@-webkit-keyframes jXsTbE{0%{opacity:.45;}to{opacity:.9;}}",
                  "@keyframes jXsTbE{0%{opacity:.45;}to{opacity:.9;}}",
                ],
                "toString": [Function],
              },
              " .8s linear infinite alternate;
  backface-visibility: hidden;
  will-change: opacity;
  background-color: ",
              "#E1E6EB",
              ";
  border: 1px solid ",
              "#E1E6EB",
              ";
  display: inline-flex;
",
              "
  border-radius: 4px;
  line-height: 1rem;
  width: ",
              [Function],
              ";
  height: ",
              [Function],
              ";
",
            ],
          },
          "displayName": "Styled(styled.span)",
          "foldedComponentIds": Array [
            "sc-bdVaJa",
          ],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <span
        className="ldvstH"
      />
    </StyledComponent>
  </Styled(styled.span)>
</BlockSkeleton>
`;

exports[`<BlockSkeleton /> should render a block skeleton with set width and height 1`] = `
<BlockSkeleton
  height={200}
  showSkeleton={true}
  width={400}
>
  <Styled(styled.span)
    height="200px"
    width="400px"
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "hwdFnQ",
            "rules": Array [
              "
  animation: ",
              Keyframes {
                "id": "sc-keyframes-jXsTbE",
                "inject": [Function],
                "name": "jXsTbE",
                "rules": Array [
                  "@-webkit-keyframes jXsTbE{0%{opacity:.45;}to{opacity:.9;}}",
                  "@keyframes jXsTbE{0%{opacity:.45;}to{opacity:.9;}}",
                ],
                "toString": [Function],
              },
              " .8s linear infinite alternate;
  backface-visibility: hidden;
  will-change: opacity;
  background-color: ",
              "#E1E6EB",
              ";
  border: 1px solid ",
              "#E1E6EB",
              ";
  display: inline-flex;
",
              "
  border-radius: 4px;
  line-height: 1rem;
  width: ",
              [Function],
              ";
  height: ",
              [Function],
              ";
",
            ],
          },
          "displayName": "Styled(styled.span)",
          "foldedComponentIds": Array [
            "sc-bdVaJa",
          ],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      height="200px"
      width="400px"
    >
      <span
        className="hwdFnQ"
        height="200px"
        width="400px"
      />
    </StyledComponent>
  </Styled(styled.span)>
</BlockSkeleton>
`;
