// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Record /> should render a Record and no Tooltip with only a custom tooltip 1`] = `
<Record
  name="Position Title"
  tooltipProps={
    Object {
      "toggleComponent": [Function],
    }
  }
>
  <div
    data-component-type="record"
  >
    <styled.div
      data-component-type="record_name"
    >
      <StyledComponent
        data-component-type="record_name"
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-htoDjs",
              "isStatic": true,
              "lastClassName": "fMKwrI",
              "rules": Array [
                "
  margin-bottom: 4px;
  .label-component {
    padding-right: .25rem;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-htoDjs",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="fMKwrI"
          data-component-type="record_name"
        >
          <Text
            className="label-component"
            color="#424F5C"
            isInline={true}
            tag="span"
            type="small"
          >
            <styled.span
              className="label-component"
              color="#424F5C"
              data-component-type="text"
              isInline={true}
              textType="small"
            >
              <StyledComponent
                className="label-component"
                color="#424F5C"
                data-component-type="text"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jzJRlG",
                      "isStatic": false,
                      "lastClassName": "gHovpS",
                      "rules": Array [
                        "
  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-jzJRlG",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                isInline={true}
                textType="small"
              >
                <span
                  className="label-component gHovpS"
                  color="#424F5C"
                  data-component-type="text"
                >
                  Position Title
                </span>
              </StyledComponent>
            </styled.span>
          </Text>
        </div>
      </StyledComponent>
    </styled.div>
    <p
      key=".0"
    >
      Chief Executive Officer
    </p>
  </div>
</Record>
`;

exports[`<Record /> should render a Record and tooltip with a custom tooltip and tooltipContent 1`] = `
<Record
  name="Position Title"
  tooltipContent="a"
  tooltipProps={
    Object {
      "toggleComponent": [Function],
    }
  }
>
  <div
    data-component-type="record"
  >
    <styled.div
      data-component-type="record_name"
    >
      <StyledComponent
        data-component-type="record_name"
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-htoDjs",
              "isStatic": true,
              "lastClassName": "fMKwrI",
              "rules": Array [
                "
  margin-bottom: 4px;
  .label-component {
    padding-right: .25rem;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-htoDjs",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="fMKwrI"
          data-component-type="record_name"
        >
          <Text
            className="label-component"
            color="#424F5C"
            isInline={true}
            tag="span"
            type="small"
          >
            <styled.span
              className="label-component"
              color="#424F5C"
              data-component-type="text"
              isInline={true}
              textType="small"
            >
              <StyledComponent
                className="label-component"
                color="#424F5C"
                data-component-type="text"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-fjdhpX",
                      "isStatic": false,
                      "lastClassName": "iflFsS",
                      "rules": Array [
                        "
  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-fjdhpX",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                isInline={true}
                textType="small"
              >
                <span
                  className="label-component iflFsS"
                  color="#424F5C"
                  data-component-type="text"
                >
                  Position Title
                </span>
              </StyledComponent>
            </styled.span>
          </Text>
          <TooltipPopover
            toggleComponent={[Function]}
          >
            <span
              aria-expanded={false}
              aria-haspopup={true}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              role="button"
            />
            <Popover
              animationType="tooltip"
              id=""
              isOpen={false}
              parentAnchorPosition="auto"
              parentRef={
                Object {
                  "current": <span
                    aria-expanded="false"
                    aria-haspopup="true"
                    role="button"
                  />,
                }
              }
              popoverAnchorPosition="auto"
            >
              <Portal
                containerInfo={<body />}
              >
                <Transition
                  appear={false}
                  enter={true}
                  exit={true}
                  in={false}
                  mountOnEnter={true}
                  onEnter={[Function]}
                  onEntered={[Function]}
                  onEntering={[Function]}
                  onExit={[Function]}
                  onExited={[Function]}
                  onExiting={[Function]}
                  timeout={300}
                  unmountOnExit={true}
                />
              </Portal>
            </Popover>
          </TooltipPopover>
        </div>
      </StyledComponent>
    </styled.div>
    <p
      key=".0"
    >
      Chief Executive Officer
    </p>
  </div>
</Record>
`;

exports[`<Record /> should render a Record component, creating a Text child with the provided number 1`] = `
<Record
  name="FTE"
>
  <div
    data-component-type="record"
  >
    <styled.div
      data-component-type="record_name"
    >
      <StyledComponent
        data-component-type="record_name"
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-htoDjs",
              "isStatic": true,
              "lastClassName": "fMKwrI",
              "rules": Array [
                "
  margin-bottom: 4px;
  .label-component {
    padding-right: .25rem;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-htoDjs",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="fMKwrI"
          data-component-type="record_name"
        >
          <Text
            className="label-component"
            color="#424F5C"
            isInline={true}
            tag="span"
            type="small"
          >
            <styled.span
              className="label-component"
              color="#424F5C"
              data-component-type="text"
              isInline={true}
              textType="small"
            >
              <StyledComponent
                className="label-component"
                color="#424F5C"
                data-component-type="text"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-gZMcBi",
                      "isStatic": false,
                      "lastClassName": "ftCBQJ",
                      "rules": Array [
                        "
  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-gZMcBi",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                isInline={true}
                textType="small"
              >
                <span
                  className="label-component ftCBQJ"
                  color="#424F5C"
                  data-component-type="text"
                >
                  FTE
                </span>
              </StyledComponent>
            </styled.span>
          </Text>
        </div>
      </StyledComponent>
    </styled.div>
    <Text
      color="#262D33"
      isInline={true}
      key=".0"
      tag="span"
      type="body"
    >
      <styled.span
        color="#262D33"
        data-component-type="text"
        isInline={true}
        textType="body"
      >
        <StyledComponent
          color="#262D33"
          data-component-type="text"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-gqjmRU",
                "isStatic": false,
                "lastClassName": "lirchM",
                "rules": Array [
                  "
  ",
                  [Function],
                  "

  ",
                  [Function],
                  "

  ",
                  [Function],
                  "

  ",
                  [Function],
                  "

  ",
                  [Function],
                  "

  ",
                  [Function],
                  "

  ",
                  [Function],
                  "

  ",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.span",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-gqjmRU",
              "target": "span",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          isInline={true}
          textType="body"
        >
          <span
            className="lirchM"
            color="#262D33"
            data-component-type="text"
          >
            1.000
          </span>
        </StyledComponent>
      </styled.span>
    </Text>
  </div>
</Record>
`;

exports[`<Record /> should render a Record component, creating a Text child with the provided text 1`] = `
<Record
  name="Position Title"
>
  <div
    data-component-type="record"
  >
    <styled.div
      data-component-type="record_name"
    >
      <StyledComponent
        data-component-type="record_name"
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-htoDjs",
              "isStatic": true,
              "lastClassName": "fMKwrI",
              "rules": Array [
                "
  margin-bottom: 4px;
  .label-component {
    padding-right: .25rem;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-htoDjs",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="fMKwrI"
          data-component-type="record_name"
        >
          <Text
            className="label-component"
            color="#424F5C"
            isInline={true}
            tag="span"
            type="small"
          >
            <styled.span
              className="label-component"
              color="#424F5C"
              data-component-type="text"
              isInline={true}
              textType="small"
            >
              <StyledComponent
                className="label-component"
                color="#424F5C"
                data-component-type="text"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-dnqmqq",
                      "isStatic": false,
                      "lastClassName": "kepwtO",
                      "rules": Array [
                        "
  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-dnqmqq",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                isInline={true}
                textType="small"
              >
                <span
                  className="label-component kepwtO"
                  color="#424F5C"
                  data-component-type="text"
                >
                  Position Title
                </span>
              </StyledComponent>
            </styled.span>
          </Text>
        </div>
      </StyledComponent>
    </styled.div>
    <Text
      color="#262D33"
      isInline={true}
      key=".0"
      tag="span"
      type="body"
    >
      <styled.span
        color="#262D33"
        data-component-type="text"
        isInline={true}
        textType="body"
      >
        <StyledComponent
          color="#262D33"
          data-component-type="text"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-iwsKbI",
                "isStatic": false,
                "lastClassName": "byTmxO",
                "rules": Array [
                  "
  ",
                  [Function],
                  "

  ",
                  [Function],
                  "

  ",
                  [Function],
                  "

  ",
                  [Function],
                  "

  ",
                  [Function],
                  "

  ",
                  [Function],
                  "

  ",
                  [Function],
                  "

  ",
                  [Function],
                  "
",
                ],
              },
              "displayName": "styled.span",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-iwsKbI",
              "target": "span",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          isInline={true}
          textType="body"
        >
          <span
            className="byTmxO"
            color="#262D33"
            data-component-type="text"
          >
            Chief Executive Officer
          </span>
        </StyledComponent>
      </styled.span>
    </Text>
  </div>
</Record>
`;

exports[`<Record /> should render a Record component, with the provided component child 1`] = `
<Record
  name="Position Title"
>
  <div
    data-component-type="record"
  >
    <styled.div
      data-component-type="record_name"
    >
      <StyledComponent
        data-component-type="record_name"
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-htoDjs",
              "isStatic": true,
              "lastClassName": "fMKwrI",
              "rules": Array [
                "
  margin-bottom: 4px;
  .label-component {
    padding-right: .25rem;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-htoDjs",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="fMKwrI"
          data-component-type="record_name"
        >
          <Text
            className="label-component"
            color="#424F5C"
            isInline={true}
            tag="span"
            type="small"
          >
            <styled.span
              className="label-component"
              color="#424F5C"
              data-component-type="text"
              isInline={true}
              textType="small"
            >
              <StyledComponent
                className="label-component"
                color="#424F5C"
                data-component-type="text"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-VigVT",
                      "isStatic": false,
                      "lastClassName": "gRhxyG",
                      "rules": Array [
                        "
  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-VigVT",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                isInline={true}
                textType="small"
              >
                <span
                  className="label-component gRhxyG"
                  color="#424F5C"
                  data-component-type="text"
                >
                  Position Title
                </span>
              </StyledComponent>
            </styled.span>
          </Text>
        </div>
      </StyledComponent>
    </styled.div>
    <p
      key=".0"
    >
      Chief Executive Officer
    </p>
  </div>
</Record>
`;

exports[`<Record /> should render a Record with a Tooltip 1`] = `
<Record
  name="Position Title"
  tooltipContent="a"
>
  <div
    data-component-type="record"
  >
    <styled.div
      data-component-type="record_name"
    >
      <StyledComponent
        data-component-type="record_name"
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-htoDjs",
              "isStatic": true,
              "lastClassName": "fMKwrI",
              "rules": Array [
                "
  margin-bottom: 4px;
  .label-component {
    padding-right: .25rem;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-htoDjs",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="fMKwrI"
          data-component-type="record_name"
        >
          <Text
            className="label-component"
            color="#424F5C"
            isInline={true}
            tag="span"
            type="small"
          >
            <styled.span
              className="label-component"
              color="#424F5C"
              data-component-type="text"
              isInline={true}
              textType="small"
            >
              <StyledComponent
                className="label-component"
                color="#424F5C"
                data-component-type="text"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jTzLTM",
                      "isStatic": false,
                      "lastClassName": "ksWUla",
                      "rules": Array [
                        "
  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "

  ",
                        [Function],
                        "
",
                      ],
                    },
                    "displayName": "styled.span",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-jTzLTM",
                    "target": "span",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                isInline={true}
                textType="small"
              >
                <span
                  className="label-component ksWUla"
                  color="#424F5C"
                  data-component-type="text"
                >
                  Position Title
                </span>
              </StyledComponent>
            </styled.span>
          </Text>
          <TooltipPopover
            toggleComponent={[Function]}
          >
            <button
              aria-expanded={false}
              aria-haspopup={true}
              className="popoverTrigger"
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
              role="button"
              type="button"
            >
              <FontAwesomeIcon
                color="#424F5C"
                type="question-circle-o"
              >
                <Icon
                  color="#424F5C"
                  isSpinning={false}
                  size="medium"
                  type="fa-question-circle-o"
                >
                  <styled.i
                    aria-hidden={true}
                    className="icon fa fa-question-circle-o"
                    color="#424F5C"
                    size="medium"
                  >
                    <StyledComponent
                      aria-hidden={true}
                      className="icon fa fa-question-circle-o"
                      color="#424F5C"
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bwzfXH",
                            "isStatic": false,
                            "lastClassName": "xCrrR",
                            "rules": Array [
                              "
   width: 1.28571em;

  ",
                              [Function],
                              "

  &.icon {
    text-align: center;

  ",
                              [Function],
                              "
  }
",
                            ],
                          },
                          "displayName": "styled.i",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bwzfXH",
                          "target": "i",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      size="medium"
                    >
                      <i
                        aria-hidden={true}
                        className="icon fa fa-question-circle-o xCrrR"
                        color="#424F5C"
                        size="medium"
                      />
                    </StyledComponent>
                  </styled.i>
                </Icon>
              </FontAwesomeIcon>
            </button>
            <Popover
              animationType="tooltip"
              id=""
              isOpen={false}
              parentAnchorPosition="auto"
              parentRef={
                Object {
                  "current": <button
                    aria-expanded="false"
                    aria-haspopup="true"
                    class="popoverTrigger"
                    role="button"
                    type="button"
                  >
                    <i
                      aria-hidden="true"
                      class="icon fa fa-question-circle-o xCrrR"
                      color="#424F5C"
                    />
                  </button>,
                }
              }
              popoverAnchorPosition="auto"
            >
              <Portal
                containerInfo={<body />}
              >
                <Transition
                  appear={false}
                  enter={true}
                  exit={true}
                  in={false}
                  mountOnEnter={true}
                  onEnter={[Function]}
                  onEntered={[Function]}
                  onEntering={[Function]}
                  onExit={[Function]}
                  onExited={[Function]}
                  onExiting={[Function]}
                  timeout={300}
                  unmountOnExit={true}
                />
              </Portal>
            </Popover>
          </TooltipPopover>
        </div>
      </StyledComponent>
    </styled.div>
    <p
      key=".0"
    >
      Chief Executive Officer
    </p>
  </div>
</Record>
`;
