// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Icon /> should render a large icon 1`] = `
.c0 {
  display: inline-block;
  font-stretch: 100%;
  width: px;
}

.c0.icon {
  text-align: center;
  font-size: 1.3125rem;
}

<Icon
  icon="fa-circle"
  size="large"
>
  <styled.i
    aria-hidden={true}
    className="icon fa-circle"
    size="large"
  >
    <StyledComponent
      aria-hidden={true}
      className="icon fa-circle"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  /** Old .fa styles */
  display: inline-block;
  font-stretch: 100%;

  width: ",
              [Function],
              "px;

  ",
              [Function],
              "

  ",
              [Function],
              "

  &.icon {
    text-align: center;

  ",
              [Function],
              "
  }
",
            ],
          },
          "displayName": "styled.i",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "i",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      size="large"
    >
      <i
        aria-hidden={true}
        className="icon fa-circle c0"
        size="large"
      />
    </StyledComponent>
  </styled.i>
</Icon>
`;

exports[`<Icon /> should render a non-FontAwesome icon 1`] = `
.c0 {
  display: inline-block;
  font-stretch: 100%;
  width: px;
}

.c0.icon {
  text-align: center;
  font-size: 1rem;
}

<Icon
  icon="intelli-icon-avatar"
>
  <styled.i
    aria-hidden={true}
    className="icon intelli-icon-avatar"
    size="medium"
  >
    <StyledComponent
      aria-hidden={true}
      className="icon intelli-icon-avatar"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  /** Old .fa styles */
  display: inline-block;
  font-stretch: 100%;

  width: ",
              [Function],
              "px;

  ",
              [Function],
              "

  ",
              [Function],
              "

  &.icon {
    text-align: center;

  ",
              [Function],
              "
  }
",
            ],
          },
          "displayName": "styled.i",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "i",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      size="medium"
    >
      <i
        aria-hidden={true}
        className="icon intelli-icon-avatar c0"
        size="medium"
      />
    </StyledComponent>
  </styled.i>
</Icon>
`;

exports[`<Icon /> should render an icon with a badge 1`] = `
.c1 {
  position: absolute;
  margin-top: -9px;
  margin-left: -15px;
}

.c0 {
  display: inline-block;
  font-stretch: 100%;
  width: px;
}

.c0.icon {
  text-align: center;
  font-size: 2rem;
}

.c2 {
  background-color: #CADDFC;
  color: #CADDFC;
  border: 1px solid #C5CED6;
  box-shadow: 0 2px 2px rgba(0,0,0,0.24);
  border-radius: 50%;
  display: inline-block;
  font-weight: 600;
  text-align: center;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.c2,
.c2 .icon {
  font-size: 15px;
  width: 24px;
  height: 24px;
  line-height: 24px;
}

.c2 .refresh-icon {
  background-color: transparent;
  position: relative;
  top: -1px;
  left: -1px;
}

<Icon
  badge={
    <Badge
      backgroundColor="#CADDFC"
      color="#CADDFC"
      label={6}
    />
  }
  icon="fa-check"
  size="xlarge"
>
  <styled.i
    aria-hidden={true}
    className="icon fa-check"
    size="xlarge"
  >
    <StyledComponent
      aria-hidden={true}
      className="icon fa-check"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  /** Old .fa styles */
  display: inline-block;
  font-stretch: 100%;

  width: ",
              [Function],
              "px;

  ",
              [Function],
              "

  ",
              [Function],
              "

  &.icon {
    text-align: center;

  ",
              [Function],
              "
  }
",
            ],
          },
          "displayName": "styled.i",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "i",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      size="xlarge"
    >
      <i
        aria-hidden={true}
        className="icon fa-check c0"
        size="xlarge"
      />
    </StyledComponent>
  </styled.i>
  <styled.span
    size="xlarge"
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "
  position: absolute;

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      size="xlarge"
    >
      <span
        className="c1"
        size="xlarge"
      >
        <Badge
          backgroundColor="#CADDFC"
          color="#CADDFC"
          label={6}
          size="medium"
        >
          <styled.span
            backgroundColor="#CADDFC"
            color="#CADDFC"
            hasBorder={true}
            size="medium"
          >
            <StyledComponent
              backgroundColor="#CADDFC"
              color="#CADDFC"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-htpNat",
                    "isStatic": false,
                    "lastClassName": "c2",
                    "rules": Array [
                      "
  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  &, .icon {
  ",
                      [Function],
                      "
  }

  ",
                      [Function],
                      "

  border-radius: 50%;
  display: inline-block;
  font-weight: 600;
  text-align: center;
  user-select: none;
  ",
                      [Function],
                      "

  .refresh-icon {
    background-color: transparent;
    position: relative;
    top: -1px;
    left: -1px;
  }
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-htpNat",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              hasBorder={true}
              size="medium"
            >
              <span
                className="c2"
                color="#CADDFC"
                size="medium"
              >
                6
              </span>
            </StyledComponent>
          </styled.span>
        </Badge>
      </span>
    </StyledComponent>
  </styled.span>
</Icon>
`;

exports[`<Icon /> should render icon with a custom size 1`] = `
.c0 {
  display: inline-block;
  font-stretch: 100%;
  width: px;
}

.c0.icon {
  text-align: center;
  font-size: 2.6rem;
}

<Icon
  customSize={2.6}
  icon="fa-check"
>
  <styled.i
    aria-hidden={true}
    className="icon fa-check"
    customSize={2.6}
    size="medium"
  >
    <StyledComponent
      aria-hidden={true}
      className="icon fa-check"
      customSize={2.6}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  /** Old .fa styles */
  display: inline-block;
  font-stretch: 100%;

  width: ",
              [Function],
              "px;

  ",
              [Function],
              "

  ",
              [Function],
              "

  &.icon {
    text-align: center;

  ",
              [Function],
              "
  }
",
            ],
          },
          "displayName": "styled.i",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "i",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      size="medium"
    >
      <i
        aria-hidden={true}
        className="icon fa-check c0"
        size="medium"
      />
    </StyledComponent>
  </styled.i>
</Icon>
`;

exports[`<Icon /> should render icon with colour 1`] = `
.c0 {
  display: inline-block;
  font-stretch: 100%;
  width: px;
  color: #1A2B3C;
}

.c0.icon {
  text-align: center;
  font-size: 1rem;
}

<Icon
  color="#1A2B3C"
  icon="fa-check"
>
  <styled.i
    aria-hidden={true}
    className="icon fa-check"
    color="#1A2B3C"
    size="medium"
  >
    <StyledComponent
      aria-hidden={true}
      className="icon fa-check"
      color="#1A2B3C"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  /** Old .fa styles */
  display: inline-block;
  font-stretch: 100%;

  width: ",
              [Function],
              "px;

  ",
              [Function],
              "

  ",
              [Function],
              "

  &.icon {
    text-align: center;

  ",
              [Function],
              "
  }
",
            ],
          },
          "displayName": "styled.i",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "i",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      size="medium"
    >
      <i
        aria-hidden={true}
        className="icon fa-check c0"
        color="#1A2B3C"
        size="medium"
      />
    </StyledComponent>
  </styled.i>
</Icon>
`;

exports[`<Icon /> should render icon with no size or colour 1`] = `
.c0 {
  display: inline-block;
  font-stretch: 100%;
  width: px;
}

.c0.icon {
  text-align: center;
  font-size: 1rem;
}

<Icon
  icon="fa-check"
>
  <styled.i
    aria-hidden={true}
    className="icon fa-check"
    size="medium"
  >
    <StyledComponent
      aria-hidden={true}
      className="icon fa-check"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  /** Old .fa styles */
  display: inline-block;
  font-stretch: 100%;

  width: ",
              [Function],
              "px;

  ",
              [Function],
              "

  ",
              [Function],
              "

  &.icon {
    text-align: center;

  ",
              [Function],
              "
  }
",
            ],
          },
          "displayName": "styled.i",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "i",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      size="medium"
    >
      <i
        aria-hidden={true}
        className="icon fa-check c0"
        size="medium"
      />
    </StyledComponent>
  </styled.i>
</Icon>
`;

exports[`<Icon /> should render icon with size 1`] = `
.c0 {
  display: inline-block;
  font-stretch: 100%;
  width: px;
}

.c0.icon {
  text-align: center;
  font-size: 1rem;
}

<Icon
  icon="fa-check"
  size="medium"
>
  <styled.i
    aria-hidden={true}
    className="icon fa-check"
    size="medium"
  >
    <StyledComponent
      aria-hidden={true}
      className="icon fa-check"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  /** Old .fa styles */
  display: inline-block;
  font-stretch: 100%;

  width: ",
              [Function],
              "px;

  ",
              [Function],
              "

  ",
              [Function],
              "

  &.icon {
    text-align: center;

  ",
              [Function],
              "
  }
",
            ],
          },
          "displayName": "styled.i",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "i",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      size="medium"
    >
      <i
        aria-hidden={true}
        className="icon fa-check c0"
        size="medium"
      />
    </StyledComponent>
  </styled.i>
</Icon>
`;
