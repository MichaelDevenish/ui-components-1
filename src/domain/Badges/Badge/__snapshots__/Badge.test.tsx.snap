// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Badge /> should render a large badge 1`] = `
<Badge
  backgroundColor="#1A2B3C"
  color="#1A293C"
  hasBorder={true}
  label={6}
  size="large"
>
  <styled.span
    backgroundColor="#1A2B3C"
    color="#1A293C"
    hasBorder={true}
    size="large"
  >
    <StyledComponent
      backgroundColor="#1A2B3C"
      color="#1A293C"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htpNat",
            "isStatic": false,
            "lastClassName": "frKdnk",
            "rules": Array [
              "
  ",
              [Function],
              "

  ",
              [Function],
              "

  &, .fa {
  ",
              [Function],
              "
  }

  ",
              [Function],
              "

  border-radius: 50%;
  display: inline-block;
  font-weight: 600;
  text-align: center;
  user-select: none;

  .refresh-icon {
    background-color: transparent;
    position: relative;
    top: -1px;
    left: -1px;
  }
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htpNat",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      hasBorder={true}
      size="large"
    >
      <span
        className="frKdnk"
        color="#1A293C"
        size="large"
      >
        6
      </span>
    </StyledComponent>
  </styled.span>
</Badge>
`;

exports[`<Badge /> should render a small badge 1`] = `
<Badge
  backgroundColor="#1A2B3C"
  color="#1A293C"
  hasBorder={true}
  label={6}
  size="small"
>
  <styled.span
    backgroundColor="#1A2B3C"
    color="#1A293C"
    hasBorder={true}
    size="small"
  >
    <StyledComponent
      backgroundColor="#1A2B3C"
      color="#1A293C"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htpNat",
            "isStatic": false,
            "lastClassName": "dsAMKk",
            "rules": Array [
              "
  ",
              [Function],
              "

  ",
              [Function],
              "

  &, .fa {
  ",
              [Function],
              "
  }

  ",
              [Function],
              "

  border-radius: 50%;
  display: inline-block;
  font-weight: 600;
  text-align: center;
  user-select: none;

  .refresh-icon {
    background-color: transparent;
    position: relative;
    top: -1px;
    left: -1px;
  }
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htpNat",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      hasBorder={true}
      size="small"
    >
      <span
        className="dsAMKk"
        color="#1A293C"
        size="small"
      >
        6
      </span>
    </StyledComponent>
  </styled.span>
</Badge>
`;

exports[`<Badge /> should render a spinning badge 1`] = `
<Badge
  backgroundColor="#1A2B3C"
  color="#1A293C"
  hasBorder={true}
  label={6}
  pending={true}
  size="small"
>
  <styled.span
    backgroundColor="#1A2B3C"
    color="#1A293C"
    hasBorder={true}
    size="small"
  >
    <StyledComponent
      backgroundColor="#1A2B3C"
      color="#1A293C"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htpNat",
            "isStatic": false,
            "lastClassName": "dsAMKk",
            "rules": Array [
              "
  ",
              [Function],
              "

  ",
              [Function],
              "

  &, .fa {
  ",
              [Function],
              "
  }

  ",
              [Function],
              "

  border-radius: 50%;
  display: inline-block;
  font-weight: 600;
  text-align: center;
  user-select: none;

  .refresh-icon {
    background-color: transparent;
    position: relative;
    top: -1px;
    left: -1px;
  }
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htpNat",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      hasBorder={true}
      size="small"
    >
      <span
        className="dsAMKk"
        color="#1A293C"
        size="small"
      >
        <FontAwesomeIcon
          className="refresh-icon"
          isSpinning={true}
          type="refresh"
        >
          <Icon
            className="refresh-icon"
            isSpinning={true}
            size="medium"
            type="fa-refresh"
          >
            <styled.i
              aria-hidden={true}
              className="refresh-icon icon fa fa-refresh fa-spin"
              size="medium"
            >
              <StyledComponent
                aria-hidden={true}
                className="refresh-icon icon fa fa-refresh fa-spin"
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bwzfXH",
                      "isStatic": false,
                      "lastClassName": "gvHWRV",
                      "rules": Array [
                        "
   width: 1.28571em;

  ",
                        [Function],
                        "

  &.icon {
    text-align: center;

  ",
                        [Function],
                        "
  }
",
                      ],
                    },
                    "displayName": "styled.i",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bwzfXH",
                    "target": "i",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                size="medium"
              >
                <i
                  aria-hidden={true}
                  className="refresh-icon icon fa fa-refresh fa-spin gvHWRV"
                  size="medium"
                />
              </StyledComponent>
            </styled.i>
          </Icon>
        </FontAwesomeIcon>
      </span>
    </StyledComponent>
  </styled.span>
</Badge>
`;
