// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TextLink /> should render a text link 1`] = `
<TextLink
  href="/lol"
  isInline={true}
  type="anchor"
>
  <Styled(Component)
    href="/lol"
    isInline={true}
    type="anchor"
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "lastClassName": "hqCXqt",
            "rules": Array [
              "
  ",
              "
  transition: color .25s ease-out;
  cursor: pointer;

  ",
              [Function],
              "

  ",
              [Function],
              "

  &,
  &:link,
  &:visited {
    color: ",
              "#432DF3",
              ";
  }

  &:hover {
    color: ",
              "#2512B3",
              ";
    ",
              [Function],
              "
  }

  &:active {
    color: ",
              "#0F0080",
              ";
  }
",
              ";
",
            ],
          },
          "displayName": "Styled(Component)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
      href="/lol"
      isInline={true}
      type="anchor"
    >
      <Component
        className="hqCXqt"
        href="/lol"
        isInline={true}
        type="anchor"
      >
        <Anchor
          className="hqCXqt"
          href="/lol"
          type="anchor"
        >
          <a
            className="hqCXqt"
            href="/lol"
            type="anchor"
          >
            Text link me
          </a>
        </Anchor>
      </Component>
    </StyledComponent>
  </Styled(Component)>
</TextLink>
`;

exports[`<TextLink /> should render a text link button 1`] = `
<TextLink
  isInline={true}
  type="button"
>
  <styled.button
    isInline={true}
    type="button"
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "lastClassName": "bedTht",
            "rules": Array [
              "
  ",
              "
  transition: color .25s ease-out;
  cursor: pointer;

  ",
              [Function],
              "

  ",
              [Function],
              "

  &,
  &:link,
  &:visited {
    color: ",
              "#432DF3",
              ";
  }

  &:hover {
    color: ",
              "#2512B3",
              ";
    ",
              [Function],
              "
  }

  &:active {
    color: ",
              "#0F0080",
              ";
  }
",
              ";
  outline: 0;
",
            ],
          },
          "displayName": "styled.button",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={true}
      type="button"
    >
      <button
        className="bedTht"
        type="button"
      >
        Text link me
      </button>
    </StyledComponent>
  </styled.button>
</TextLink>
`;

exports[`<TextLink /> should render a text link with display block 1`] = `
<TextLink
  href="#"
  isInline={false}
  type="anchor"
>
  <Styled(Component)
    href="#"
    isInline={false}
    type="anchor"
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "lastClassName": "ftWmR",
            "rules": Array [
              "
  ",
              "
  transition: color .25s ease-out;
  cursor: pointer;

  ",
              [Function],
              "

  ",
              [Function],
              "

  &,
  &:link,
  &:visited {
    color: ",
              "#432DF3",
              ";
  }

  &:hover {
    color: ",
              "#2512B3",
              ";
    ",
              [Function],
              "
  }

  &:active {
    color: ",
              "#0F0080",
              ";
  }
",
              ";
",
            ],
          },
          "displayName": "Styled(Component)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
      href="#"
      isInline={false}
      type="anchor"
    >
      <Component
        className="ftWmR"
        href="#"
        isInline={false}
        type="anchor"
      >
        <Anchor
          className="ftWmR"
          href="#"
          type="anchor"
        >
          <a
            className="ftWmR"
            href="#"
            type="anchor"
          >
            Block text link
          </a>
        </Anchor>
      </Component>
    </StyledComponent>
  </Styled(Component)>
</TextLink>
`;

exports[`<TextLink /> should render a text link with underline on hover 1`] = `
<TextLink
  href="#"
  isInline={true}
  type="anchor"
  underlineOnHover={true}
>
  <Styled(Component)
    href="#"
    isInline={true}
    type="anchor"
    underlineOnHover={true}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "lastClassName": "cHnwZo",
            "rules": Array [
              "
  ",
              "
  transition: color .25s ease-out;
  cursor: pointer;

  ",
              [Function],
              "

  ",
              [Function],
              "

  &,
  &:link,
  &:visited {
    color: ",
              "#432DF3",
              ";
  }

  &:hover {
    color: ",
              "#2512B3",
              ";
    ",
              [Function],
              "
  }

  &:active {
    color: ",
              "#0F0080",
              ";
  }
",
              ";
",
            ],
          },
          "displayName": "Styled(Component)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
      href="#"
      isInline={true}
      type="anchor"
      underlineOnHover={true}
    >
      <Component
        className="cHnwZo"
        href="#"
        isInline={true}
        type="anchor"
        underlineOnHover={true}
      >
        <Anchor
          className="cHnwZo"
          href="#"
          type="anchor"
          underlineOnHover={true}
        >
          <a
            className="cHnwZo"
            href="#"
            type="anchor"
            underlineOnHover={true}
          >
            Underline text link on hover
          </a>
        </Anchor>
      </Component>
    </StyledComponent>
  </Styled(Component)>
</TextLink>
`;
