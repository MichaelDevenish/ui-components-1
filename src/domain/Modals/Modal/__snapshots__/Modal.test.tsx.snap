// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Modal /> should render a hidden modal 1`] = `
<Modal
  isOpen={false}
  offsetZIndex={0}
  showCloseButton={true}
  size="medium"
  useSubcomponents={false}
>
  <Styled(ReactModalAdapter)
    ariaHideApp={false}
    className="modal modal-size-medium"
    isOpen={false}
    overlayClassName="modal-overlay"
    style={
      Object {
        "content": Object {
          "zIndex": 1001,
        },
        "overlay": Object {
          "zIndex": 1000,
        },
      }
    }
  >
    <StyledComponent
      ariaHideApp={false}
      className="modal modal-size-medium"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": true,
            "lastClassName": "fPmWbg",
            "rules": Array [
              "
  .modal-overlay {
    background-color: ",
              "rgba(38, 45, 51, 0.45)",
              ";

    display: flex;
    flex-direction: column;
    overflow-y: auto;
    padding: 1rem 0;
    position: fixed;
    -webkit-overflow-scrolling: touch;

    bottom: 0;
    left: 0;
    right: 0;
    top: 0;

    @media only screen and (max-width: ",
              "640",
              "px) {
      background-color: ",
              "#FFFFFF",
              ";
      height: 100%;
      min-height: 100vh;
      padding: 0;

      left: 0;
      margin: 0;
      top: 0;
    }
  }

  .modal {
    background-color: ",
              "#FFFFFF",
              ";
    border: 1px solid ",
              "#C5CED6",
              ";
    border-radius: ",
              "4",
              "px;
    flex-shrink: 0;
    height: auto;
    margin: auto;
    outline: none;
    overflow-y: visible;
    padding: 1.5rem;
    position: relative;

    &.subcomponent-modal-style {
      padding: 0;
      display: flex;
      flex-direction: column;

      .modal-close-button {
        right: 29px;
        top: 33px;
        line-height: 14px;
      }
    }

    @media only screen and (max-width: ",
              "640",
              "px) {
      border: 0;
      border-radius: 0;

      max-width: none;
      min-height: 100vh;
      position: initial;
      transform: none;

      // Add a bottom padding in mobile to counteract ios bottom bar
      padding-bottom: 100px;
    }

    .modal-close-button {
      cursor: pointer;

      position: absolute;
      right: 1rem;
      top: 0.5rem;

      color: ",
              "#262D33",
              ";
      font-size: 2em;
      line-height: 1;

      @media only screen and (max-width: ",
              "640",
              "px) {
        position: fixed;
        will-change: scroll-position;
      }
    }

    &.modal-size-xlarge {
      min-width: ",
              "1380",
              "px;
      width: ",
              "1380",
              "px;

      @media only screen and (max-width: ",
              "1440",
              "px) {
        min-width: 0;
        width: 90%;
      }

      @media only screen and (max-width: ",
              "640",
              "px) {
        min-width: 0;
        width: 100%;
      }
    }

    &.modal-size-large {
      min-width: ",
              "974",
              "px;
      width: ",
              "974",
              "px;

      @media only screen and (max-width: ",
              "1034",
              "px) {
        min-width: 0;
        width: 90%;
      }

      @media only screen and (max-width: ",
              "640",
              "px) {
        min-width: 0;
        width: 100%;
      }
    }

    &.modal-size-medium {
      min-width: ",
              "580",
              "px;
      width: ",
              "580",
              "px;

      @media only screen and (max-width: ",
              "640",
              "px) {
        min-width: 0;
        width: 100%;
      }
    }
  }
",
            ],
          },
          "displayName": "Styled(ReactModalAdapter)",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": [Function],
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
          Symbol(Symbol.hasInstance): [Function],
        }
      }
      forwardedRef={null}
      isOpen={false}
      overlayClassName="modal-overlay"
      style={
        Object {
          "content": Object {
            "zIndex": 1001,
          },
          "overlay": Object {
            "zIndex": 1000,
          },
        }
      }
    >
      <ReactModalAdapter
        ariaHideApp={false}
        className="modal modal-size-medium fPmWbg"
        isOpen={false}
        overlayClassName="modal-overlay"
        style={
          Object {
            "content": Object {
              "zIndex": 1001,
            },
            "overlay": Object {
              "zIndex": 1000,
            },
          }
        }
      >
        <Modal
          ariaHideApp={false}
          bodyOpenClassName="ReactModal__Body--open"
          className="modal modal-size-medium fPmWbg__content"
          closeTimeoutMS={0}
          isOpen={false}
          overlayClassName="modal-overlay"
          overlayRef={[Function]}
          parentSelector={[Function]}
          portalClassName="modal modal-size-medium sc-bdVaJa fPmWbg"
          shouldCloseOnEsc={true}
          shouldCloseOnOverlayClick={true}
          shouldFocusAfterRender={true}
          shouldReturnFocusAfterClose={true}
          style={
            Object {
              "content": Object {
                "zIndex": 1001,
              },
              "overlay": Object {
                "zIndex": 1000,
              },
            }
          }
        >
          <Portal
            containerInfo={
              <div
                class="modal modal-size-medium fPmWbg"
              />
            }
          >
            <ModalPortal
              ariaHideApp={false}
              bodyOpenClassName="ReactModal__Body--open"
              className="modal modal-size-medium fPmWbg__content"
              closeTimeoutMS={0}
              defaultStyles={
                Object {
                  "content": Object {
                    "WebkitOverflowScrolling": "touch",
                    "background": "#fff",
                    "border": "1px solid #ccc",
                    "borderRadius": "4px",
                    "bottom": "40px",
                    "left": "40px",
                    "outline": "none",
                    "overflow": "auto",
                    "padding": "20px",
                    "position": "absolute",
                    "right": "40px",
                    "top": "40px",
                  },
                  "overlay": Object {
                    "backgroundColor": "rgba(255, 255, 255, 0.75)",
                    "bottom": 0,
                    "left": 0,
                    "position": "fixed",
                    "right": 0,
                    "top": 0,
                  },
                }
              }
              isOpen={false}
              overlayClassName="modal-overlay"
              overlayRef={[Function]}
              parentSelector={[Function]}
              portalClassName="modal modal-size-medium sc-bdVaJa fPmWbg"
              shouldCloseOnEsc={true}
              shouldCloseOnOverlayClick={true}
              shouldFocusAfterRender={true}
              shouldReturnFocusAfterClose={true}
              style={
                Object {
                  "content": Object {
                    "zIndex": 1001,
                  },
                  "overlay": Object {
                    "zIndex": 1000,
                  },
                }
              }
            />
          </Portal>
        </Modal>
      </ReactModalAdapter>
    </StyledComponent>
  </Styled(ReactModalAdapter)>
</Modal>
`;

exports[`<Modal /> should render a shown modal with no close button 1`] = `
<Styled(ReactModalAdapter)
  ariaHideApp={false}
  className="modal modal-size-medium"
  isOpen={true}
  overlayClassName="modal-overlay"
  style={
    Object {
      "content": Object {
        "zIndex": 1001,
      },
      "overlay": Object {
        "zIndex": 1000,
      },
    }
  }
>
  This text is shown
</Styled(ReactModalAdapter)>
`;
