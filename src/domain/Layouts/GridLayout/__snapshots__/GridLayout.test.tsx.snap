// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<GridLayout /> should render a GridLayout 1`] = `
<GridLayout
  cells={
    Array [
      Object {
        "content": <div>
          1
        </div>,
        "size": 10,
      },
      Object {
        "content": <div>
          2
        </div>,
        "displayType": "flex",
        "flexHorizontalAlignment": Object {
          "desktop": "right",
          "min": "center",
        },
        "size": 2,
      },
      Object {
        "content": <div>
          3
        </div>,
        "offset": Object {
          "tablet": 2,
        },
        "size": Object {
          "desktop": 3,
          "tablet": 4,
        },
      },
      Object {
        "content": <div>
          4
        </div>,
        "size": Object {
          "desktop": 6,
          "tablet": 4,
        },
      },
      Object {
        "content": <div>
          5
        </div>,
        "offset": 3,
        "size": "auto",
      },
    ]
  }
  gridColumns={12}
  gutterMarginX={4}
  gutterMarginY="none"
  gutterPaddingX="none"
  gutterPaddingY={
    Object {
      "desktop": "none",
      "min": 16,
    }
  }
  horizontalAlignment="center"
  verticalAlignment="stretch"
>
  <styled.div
    data-component-type="grid_layout"
    gutterMarginX={4}
    gutterMarginY="none"
    horizontalAlignment="center"
    verticalAlignment="stretch"
  >
    <StyledComponent
      data-component-type="grid_layout"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "lastClassName": "dyOuOa",
            "rules": Array [
              "
  display: flex;
  flex-flow: row wrap;
  flex: 1 0 auto;

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      gutterMarginX={4}
      gutterMarginY="none"
      horizontalAlignment="center"
      verticalAlignment="stretch"
    >
      <div
        className="dyOuOa"
        data-component-type="grid_layout"
      >
        <TransitionGroup
          childFactory={[Function]}
          component={null}
        >
          <CSSTransition
            classNames="grid-layout-cell-animation"
            in={true}
            key=".$0"
            onExited={[Function]}
            timeout={200}
          >
            <Transition
              appear={false}
              enter={true}
              exit={true}
              in={true}
              mountOnEnter={false}
              onEnter={[Function]}
              onEntered={[Function]}
              onEntering={[Function]}
              onExit={[Function]}
              onExited={[Function]}
              onExiting={[Function]}
              timeout={200}
              unmountOnExit={false}
            >
              <styled.div
                animationStyle="none"
                data-component-type="grid_layout_cell"
                displayType="block"
                flexHorizontalAlignments="left"
                gridColumns={12}
                gutterMarginX={4}
                gutterMarginY="none"
                gutterPaddingX="none"
                gutterPaddingY={
                  Object {
                    "desktop": "none",
                    "min": 16,
                  }
                }
                offsets={0}
                sizes={10}
              >
                <StyledComponent
                  animationStyle="none"
                  data-component-type="grid_layout_cell"
                  displayType="block"
                  flexHorizontalAlignments="left"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bwzfXH",
                        "isStatic": false,
                        "lastClassName": "hPXGJc",
                        "rules": Array [
                          "
  flex: 0 0 auto;
  flex-basis: auto;
  min-height: 0;
  min-width: 0;
  width: 100%;

  ",
                          [Function],
                          "
  ",
                          [Function],
                          "
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bwzfXH",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  gridColumns={12}
                  gutterMarginX={4}
                  gutterMarginY="none"
                  gutterPaddingX="none"
                  gutterPaddingY={
                    Object {
                      "desktop": "none",
                      "min": 16,
                    }
                  }
                  offsets={0}
                  sizes={10}
                >
                  <div
                    className="boDdfZ"
                    data-component-type="grid_layout_cell"
                    sizes={10}
                  >
                    <div>
                      1
                    </div>
                  </div>
                </StyledComponent>
              </styled.div>
            </Transition>
          </CSSTransition>
          <CSSTransition
            classNames="grid-layout-cell-animation"
            in={true}
            key=".$1"
            onExited={[Function]}
            timeout={200}
          >
            <Transition
              appear={false}
              enter={true}
              exit={true}
              in={true}
              mountOnEnter={false}
              onEnter={[Function]}
              onEntered={[Function]}
              onEntering={[Function]}
              onExit={[Function]}
              onExited={[Function]}
              onExiting={[Function]}
              timeout={200}
              unmountOnExit={false}
            >
              <styled.div
                animationStyle="none"
                data-component-type="grid_layout_cell"
                displayType="flex"
                flexHorizontalAlignments={
                  Object {
                    "desktop": "right",
                    "min": "center",
                  }
                }
                gridColumns={12}
                gutterMarginX={4}
                gutterMarginY="none"
                gutterPaddingX="none"
                gutterPaddingY={
                  Object {
                    "desktop": "none",
                    "min": 16,
                  }
                }
                offsets={0}
                sizes={2}
              >
                <StyledComponent
                  animationStyle="none"
                  data-component-type="grid_layout_cell"
                  displayType="flex"
                  flexHorizontalAlignments={
                    Object {
                      "desktop": "right",
                      "min": "center",
                    }
                  }
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bwzfXH",
                        "isStatic": false,
                        "lastClassName": "hPXGJc",
                        "rules": Array [
                          "
  flex: 0 0 auto;
  flex-basis: auto;
  min-height: 0;
  min-width: 0;
  width: 100%;

  ",
                          [Function],
                          "
  ",
                          [Function],
                          "
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bwzfXH",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  gridColumns={12}
                  gutterMarginX={4}
                  gutterMarginY="none"
                  gutterPaddingX="none"
                  gutterPaddingY={
                    Object {
                      "desktop": "none",
                      "min": 16,
                    }
                  }
                  offsets={0}
                  sizes={2}
                >
                  <div
                    className="dkzFMW"
                    data-component-type="grid_layout_cell"
                    sizes={2}
                  >
                    <div>
                      2
                    </div>
                  </div>
                </StyledComponent>
              </styled.div>
            </Transition>
          </CSSTransition>
          <CSSTransition
            classNames="grid-layout-cell-animation"
            in={true}
            key=".$2"
            onExited={[Function]}
            timeout={200}
          >
            <Transition
              appear={false}
              enter={true}
              exit={true}
              in={true}
              mountOnEnter={false}
              onEnter={[Function]}
              onEntered={[Function]}
              onEntering={[Function]}
              onExit={[Function]}
              onExited={[Function]}
              onExiting={[Function]}
              timeout={200}
              unmountOnExit={false}
            >
              <styled.div
                animationStyle="none"
                data-component-type="grid_layout_cell"
                displayType="block"
                flexHorizontalAlignments="left"
                gridColumns={12}
                gutterMarginX={4}
                gutterMarginY="none"
                gutterPaddingX="none"
                gutterPaddingY={
                  Object {
                    "desktop": "none",
                    "min": 16,
                  }
                }
                offsets={
                  Object {
                    "tablet": 2,
                  }
                }
                sizes={
                  Object {
                    "desktop": 3,
                    "tablet": 4,
                  }
                }
              >
                <StyledComponent
                  animationStyle="none"
                  data-component-type="grid_layout_cell"
                  displayType="block"
                  flexHorizontalAlignments="left"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bwzfXH",
                        "isStatic": false,
                        "lastClassName": "hPXGJc",
                        "rules": Array [
                          "
  flex: 0 0 auto;
  flex-basis: auto;
  min-height: 0;
  min-width: 0;
  width: 100%;

  ",
                          [Function],
                          "
  ",
                          [Function],
                          "
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bwzfXH",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  gridColumns={12}
                  gutterMarginX={4}
                  gutterMarginY="none"
                  gutterPaddingX="none"
                  gutterPaddingY={
                    Object {
                      "desktop": "none",
                      "min": 16,
                    }
                  }
                  offsets={
                    Object {
                      "tablet": 2,
                    }
                  }
                  sizes={
                    Object {
                      "desktop": 3,
                      "tablet": 4,
                    }
                  }
                >
                  <div
                    className="eDnddy"
                    data-component-type="grid_layout_cell"
                    sizes={
                      Object {
                        "desktop": 3,
                        "tablet": 4,
                      }
                    }
                  >
                    <div>
                      3
                    </div>
                  </div>
                </StyledComponent>
              </styled.div>
            </Transition>
          </CSSTransition>
          <CSSTransition
            classNames="grid-layout-cell-animation"
            in={true}
            key=".$3"
            onExited={[Function]}
            timeout={200}
          >
            <Transition
              appear={false}
              enter={true}
              exit={true}
              in={true}
              mountOnEnter={false}
              onEnter={[Function]}
              onEntered={[Function]}
              onEntering={[Function]}
              onExit={[Function]}
              onExited={[Function]}
              onExiting={[Function]}
              timeout={200}
              unmountOnExit={false}
            >
              <styled.div
                animationStyle="none"
                data-component-type="grid_layout_cell"
                displayType="block"
                flexHorizontalAlignments="left"
                gridColumns={12}
                gutterMarginX={4}
                gutterMarginY="none"
                gutterPaddingX="none"
                gutterPaddingY={
                  Object {
                    "desktop": "none",
                    "min": 16,
                  }
                }
                offsets={0}
                sizes={
                  Object {
                    "desktop": 6,
                    "tablet": 4,
                  }
                }
              >
                <StyledComponent
                  animationStyle="none"
                  data-component-type="grid_layout_cell"
                  displayType="block"
                  flexHorizontalAlignments="left"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bwzfXH",
                        "isStatic": false,
                        "lastClassName": "hPXGJc",
                        "rules": Array [
                          "
  flex: 0 0 auto;
  flex-basis: auto;
  min-height: 0;
  min-width: 0;
  width: 100%;

  ",
                          [Function],
                          "
  ",
                          [Function],
                          "
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bwzfXH",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  gridColumns={12}
                  gutterMarginX={4}
                  gutterMarginY="none"
                  gutterPaddingX="none"
                  gutterPaddingY={
                    Object {
                      "desktop": "none",
                      "min": 16,
                    }
                  }
                  offsets={0}
                  sizes={
                    Object {
                      "desktop": 6,
                      "tablet": 4,
                    }
                  }
                >
                  <div
                    className="cAmRDl"
                    data-component-type="grid_layout_cell"
                    sizes={
                      Object {
                        "desktop": 6,
                        "tablet": 4,
                      }
                    }
                  >
                    <div>
                      4
                    </div>
                  </div>
                </StyledComponent>
              </styled.div>
            </Transition>
          </CSSTransition>
          <CSSTransition
            classNames="grid-layout-cell-animation"
            in={true}
            key=".$4"
            onExited={[Function]}
            timeout={200}
          >
            <Transition
              appear={false}
              enter={true}
              exit={true}
              in={true}
              mountOnEnter={false}
              onEnter={[Function]}
              onEntered={[Function]}
              onEntering={[Function]}
              onExit={[Function]}
              onExited={[Function]}
              onExiting={[Function]}
              timeout={200}
              unmountOnExit={false}
            >
              <styled.div
                animationStyle="none"
                data-component-type="grid_layout_cell"
                displayType="block"
                flexHorizontalAlignments="left"
                gridColumns={12}
                gutterMarginX={4}
                gutterMarginY="none"
                gutterPaddingX="none"
                gutterPaddingY={
                  Object {
                    "desktop": "none",
                    "min": 16,
                  }
                }
                offsets={3}
                sizes="auto"
              >
                <StyledComponent
                  animationStyle="none"
                  data-component-type="grid_layout_cell"
                  displayType="block"
                  flexHorizontalAlignments="left"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-bwzfXH",
                        "isStatic": false,
                        "lastClassName": "hPXGJc",
                        "rules": Array [
                          "
  flex: 0 0 auto;
  flex-basis: auto;
  min-height: 0;
  min-width: 0;
  width: 100%;

  ",
                          [Function],
                          "
  ",
                          [Function],
                          "
",
                        ],
                      },
                      "displayName": "styled.div",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-bwzfXH",
                      "target": "div",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  gridColumns={12}
                  gutterMarginX={4}
                  gutterMarginY="none"
                  gutterPaddingX="none"
                  gutterPaddingY={
                    Object {
                      "desktop": "none",
                      "min": 16,
                    }
                  }
                  offsets={3}
                  sizes="auto"
                >
                  <div
                    className="hPXGJc"
                    data-component-type="grid_layout_cell"
                    sizes="auto"
                  >
                    <div>
                      5
                    </div>
                  </div>
                </StyledComponent>
              </styled.div>
            </Transition>
          </CSSTransition>
        </TransitionGroup>
      </div>
    </StyledComponent>
  </styled.div>
</GridLayout>
`;
