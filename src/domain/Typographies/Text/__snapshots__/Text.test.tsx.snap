// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Text /> should render a non-inline text element 1`] = `
<Text
  isInline={false}
  tag="span"
  type="body"
>
  <styled.span
    as="span"
    data-component-type="text"
    isInline={false}
    textType="body"
  >
    <StyledComponent
      as="span"
      data-component-type="text"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gzVnrw",
            "isStatic": false,
            "lastClassName": "cLkjew",
            "rules": Array [
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gzVnrw",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={false}
      textType="body"
    >
      <span
        className="cLkjew"
        data-component-type="text"
      >
        Hello, world!
      </span>
    </StyledComponent>
  </styled.span>
</Text>
`;

exports[`<Text /> should render a text element as a h1 1`] = `
<Text
  isInline={true}
  tag="h1"
  type="body"
>
  <styled.span
    as="h1"
    data-component-type="text"
    isInline={true}
    textType="body"
  >
    <StyledComponent
      as="h1"
      data-component-type="text"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gzVnrw",
            "isStatic": false,
            "lastClassName": "ccQvFO",
            "rules": Array [
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gzVnrw",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={true}
      textType="body"
    >
      <h1
        className="ccQvFO"
        data-component-type="text"
      >
        Hello, world!
      </h1>
    </StyledComponent>
  </styled.span>
</Text>
`;

exports[`<Text /> should render a text with data attributes 1`] = `
<Text
  dataAttributes={
    Object {
      "otherKey": "myOtherKey",
      "role": "myRole",
    }
  }
  isInline={true}
  tag="span"
  type="body"
>
  <styled.span
    as="span"
    data-component-type="text"
    data-otherKey="myOtherKey"
    data-role="myRole"
    isInline={true}
    textType="body"
  >
    <StyledComponent
      as="span"
      data-component-type="text"
      data-otherKey="myOtherKey"
      data-role="myRole"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gzVnrw",
            "isStatic": false,
            "lastClassName": "ccQvFO",
            "rules": Array [
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gzVnrw",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={true}
      textType="body"
    >
      <span
        className="ccQvFO"
        data-component-type="text"
        data-otherKey="myOtherKey"
        data-role="myRole"
      >
        Hello! I am text with data attributes
      </span>
    </StyledComponent>
  </styled.span>
</Text>
`;

exports[`<Text /> should render a text with margin 1`] = `
<Text
  isInline={true}
  margins={
    Object {
      "bottom": 20,
      "left": 20,
      "right": 20,
      "top": 20,
    }
  }
  tag="span"
  type="body"
>
  <styled.span
    as="span"
    data-component-type="text"
    isInline={true}
    margins={
      Object {
        "bottom": 20,
        "left": 20,
        "right": 20,
        "top": 20,
      }
    }
    textType="body"
  >
    <StyledComponent
      as="span"
      data-component-type="text"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gzVnrw",
            "isStatic": false,
            "lastClassName": "hKJaBA",
            "rules": Array [
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gzVnrw",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={true}
      margins={
        Object {
          "bottom": 20,
          "left": 20,
          "right": 20,
          "top": 20,
        }
      }
      textType="body"
    >
      <span
        className="hKJaBA"
        data-component-type="text"
      >
        Hello! I have special margin
      </span>
    </StyledComponent>
  </styled.span>
</Text>
`;

exports[`<Text /> should render an element with colored text 1`] = `
<Text
  color="#F25749"
  isInline={true}
  tag="span"
  type="body"
>
  <styled.span
    as="span"
    color="#F25749"
    data-component-type="text"
    isInline={true}
    textType="body"
  >
    <StyledComponent
      as="span"
      color="#F25749"
      data-component-type="text"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gzVnrw",
            "isStatic": false,
            "lastClassName": "laNfsg",
            "rules": Array [
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gzVnrw",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={true}
      textType="body"
    >
      <span
        className="laNfsg"
        color="#F25749"
        data-component-type="text"
      >
        Hello, world!
      </span>
    </StyledComponent>
  </styled.span>
</Text>
`;

exports[`<Text /> should render an element with heading text 1`] = `
<Text
  isInline={true}
  tag="span"
  type="heading"
>
  <styled.span
    as="span"
    data-component-type="text"
    isInline={true}
    textType="heading"
  >
    <StyledComponent
      as="span"
      data-component-type="text"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gzVnrw",
            "isStatic": false,
            "lastClassName": "ePBcfr",
            "rules": Array [
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gzVnrw",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={true}
      textType="heading"
    >
      <span
        className="ePBcfr"
        data-component-type="text"
      >
        Hello, world!
      </span>
    </StyledComponent>
  </styled.span>
</Text>
`;

exports[`<Text /> should render an element with semi bold text 1`] = `
<Text
  isInline={true}
  tag="span"
  type="body"
  weight={600}
>
  <styled.span
    as="span"
    data-component-type="text"
    isInline={true}
    textType="body"
    weight={600}
  >
    <StyledComponent
      as="span"
      data-component-type="text"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gzVnrw",
            "isStatic": false,
            "lastClassName": "kbnzwI",
            "rules": Array [
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gzVnrw",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={true}
      textType="body"
      weight={600}
    >
      <span
        className="kbnzwI"
        data-component-type="text"
      >
        Hello, world!
      </span>
    </StyledComponent>
  </styled.span>
</Text>
`;

exports[`<Text /> should render an element with small text 1`] = `
<Text
  isInline={true}
  tag="span"
  type="small"
>
  <styled.span
    as="span"
    data-component-type="text"
    isInline={true}
    textType="small"
  >
    <StyledComponent
      as="span"
      data-component-type="text"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gzVnrw",
            "isStatic": false,
            "lastClassName": "gCixKX",
            "rules": Array [
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gzVnrw",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={true}
      textType="small"
    >
      <span
        className="gCixKX"
        data-component-type="text"
      >
        Hello, world!
      </span>
    </StyledComponent>
  </styled.span>
</Text>
`;

exports[`<Text /> should render an element with text 1`] = `
<Text
  isInline={true}
  tag="span"
  type="body"
>
  <styled.span
    as="span"
    data-component-type="text"
    isInline={true}
    textType="body"
  >
    <StyledComponent
      as="span"
      data-component-type="text"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gzVnrw",
            "isStatic": false,
            "lastClassName": "ccQvFO",
            "rules": Array [
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gzVnrw",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={true}
      textType="body"
    >
      <span
        className="ccQvFO"
        data-component-type="text"
      >
        Hello, world!
      </span>
    </StyledComponent>
  </styled.span>
</Text>
`;

exports[`<Text /> should render an element with the text converted to uppercase 1`] = `
<Text
  isInline={true}
  isUpper={true}
  tag="span"
  type="body"
>
  <styled.span
    as="span"
    data-component-type="text"
    isInline={true}
    isUpper={true}
    textType="body"
  >
    <StyledComponent
      as="span"
      data-component-type="text"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gzVnrw",
            "isStatic": false,
            "lastClassName": "jJEQbd",
            "rules": Array [
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gzVnrw",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={true}
      isUpper={true}
      textType="body"
    >
      <span
        className="jJEQbd"
        data-component-type="text"
      >
        Hello, world!
      </span>
    </StyledComponent>
  </styled.span>
</Text>
`;
