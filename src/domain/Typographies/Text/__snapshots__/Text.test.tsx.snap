// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Text /> should render a non-inline text element 1`] = `
<Text
  isInline={false}
  tag="span"
  type="body"
>
  <styled.span
    data-component-type="text"
    isInline={false}
    textType="body"
  >
    <StyledComponent
      data-component-type="text"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-jTzLTM",
            "isStatic": false,
            "lastClassName": "CObAe",
            "rules": Array [
              "
  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-jTzLTM",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={false}
      textType="body"
    >
      <span
        className="CObAe"
        data-component-type="text"
      >
        Hello, world!
      </span>
    </StyledComponent>
  </styled.span>
</Text>
`;

exports[`<Text /> should render a text element as a h1 1`] = `
<Text
  isInline={true}
  tag="h1"
  type="body"
>
  <styled.h1
    data-component-type="text"
    isInline={true}
    textType="body"
  >
    <StyledComponent
      data-component-type="text"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-fjdhpX",
            "isStatic": false,
            "lastClassName": "ctnFRD",
            "rules": Array [
              "
  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.h1",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-fjdhpX",
          "target": "h1",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={true}
      textType="body"
    >
      <h1
        className="ctnFRD"
        data-component-type="text"
      >
        Hello, world!
      </h1>
    </StyledComponent>
  </styled.h1>
</Text>
`;

exports[`<Text /> should render a text with data attributes 1`] = `
<Text
  dataAttributes={
    Object {
      "otherKey": "myOtherKey",
      "role": "myRole",
    }
  }
  isInline={true}
  tag="span"
  type="body"
>
  <styled.span
    data-component-type="text"
    data-otherKey="myOtherKey"
    data-role="myRole"
    isInline={true}
    textType="body"
  >
    <StyledComponent
      data-component-type="text"
      data-otherKey="myOtherKey"
      data-role="myRole"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-jzJRlG",
            "isStatic": false,
            "lastClassName": "TQvZr",
            "rules": Array [
              "
  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-jzJRlG",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={true}
      textType="body"
    >
      <span
        className="TQvZr"
        data-component-type="text"
        data-otherKey="myOtherKey"
        data-role="myRole"
      >
        Hello! I am text with data attributes
      </span>
    </StyledComponent>
  </styled.span>
</Text>
`;

exports[`<Text /> should render a text with margin 1`] = `
<Text
  isInline={true}
  margins={
    Object {
      "bottom": 20,
      "left": 20,
      "right": 20,
      "top": 20,
    }
  }
  tag="span"
  type="body"
>
  <styled.span
    data-component-type="text"
    isInline={true}
    margins={
      Object {
        "bottom": 20,
        "left": 20,
        "right": 20,
        "top": 20,
      }
    }
    textType="body"
  >
    <StyledComponent
      data-component-type="text"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-chPdSV",
            "isStatic": false,
            "lastClassName": "gReSio",
            "rules": Array [
              "
  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-chPdSV",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={true}
      margins={
        Object {
          "bottom": 20,
          "left": 20,
          "right": 20,
          "top": 20,
        }
      }
      textType="body"
    >
      <span
        className="gReSio"
        data-component-type="text"
      >
        Hello! I have special margin
      </span>
    </StyledComponent>
  </styled.span>
</Text>
`;

exports[`<Text /> should render an element with colored text 1`] = `
<Text
  color="#F25749"
  isInline={true}
  tag="span"
  type="body"
>
  <styled.span
    color="#F25749"
    data-component-type="text"
    isInline={true}
    textType="body"
  >
    <StyledComponent
      color="#F25749"
      data-component-type="text"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-iwsKbI",
            "isStatic": false,
            "lastClassName": "iyoxNw",
            "rules": Array [
              "
  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-iwsKbI",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={true}
      textType="body"
    >
      <span
        className="iyoxNw"
        color="#F25749"
        data-component-type="text"
      >
        Hello, world!
      </span>
    </StyledComponent>
  </styled.span>
</Text>
`;

exports[`<Text /> should render an element with heading text 1`] = `
<Text
  isInline={true}
  tag="span"
  type="heading"
>
  <styled.span
    data-component-type="text"
    isInline={true}
    textType="heading"
  >
    <StyledComponent
      data-component-type="text"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gqjmRU",
            "isStatic": false,
            "lastClassName": "eCzpRn",
            "rules": Array [
              "
  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gqjmRU",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={true}
      textType="heading"
    >
      <span
        className="eCzpRn"
        data-component-type="text"
      >
        Hello, world!
      </span>
    </StyledComponent>
  </styled.span>
</Text>
`;

exports[`<Text /> should render an element with heavy text 1`] = `
<Text
  isInline={true}
  tag="span"
  type="body"
  weight="heavy"
>
  <styled.span
    data-component-type="text"
    isInline={true}
    textType="body"
    weight="heavy"
  >
    <StyledComponent
      data-component-type="text"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-dnqmqq",
            "isStatic": false,
            "lastClassName": "bjkYFA",
            "rules": Array [
              "
  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-dnqmqq",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={true}
      textType="body"
      weight="heavy"
    >
      <span
        className="bjkYFA"
        data-component-type="text"
      >
        Hello, world!
      </span>
    </StyledComponent>
  </styled.span>
</Text>
`;

exports[`<Text /> should render an element with small text 1`] = `
<Text
  isInline={true}
  tag="span"
  type="small"
>
  <styled.span
    data-component-type="text"
    isInline={true}
    textType="small"
  >
    <StyledComponent
      data-component-type="text"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gZMcBi",
            "isStatic": false,
            "lastClassName": "bEdVCa",
            "rules": Array [
              "
  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gZMcBi",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={true}
      textType="small"
    >
      <span
        className="bEdVCa"
        data-component-type="text"
      >
        Hello, world!
      </span>
    </StyledComponent>
  </styled.span>
</Text>
`;

exports[`<Text /> should render an element with text 1`] = `
<Text
  isInline={true}
  tag="span"
  type="body"
>
  <styled.span
    data-component-type="text"
    isInline={true}
    textType="body"
  >
    <StyledComponent
      data-component-type="text"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htoDjs",
            "isStatic": false,
            "lastClassName": "dqhJLs",
            "rules": Array [
              "
  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htoDjs",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={true}
      textType="body"
    >
      <span
        className="dqhJLs"
        data-component-type="text"
      >
        Hello, world!
      </span>
    </StyledComponent>
  </styled.span>
</Text>
`;

exports[`<Text /> should render an element with the text converted to uppercase 1`] = `
<Text
  isInline={true}
  isUpper={true}
  tag="span"
  type="body"
>
  <styled.span
    data-component-type="text"
    isInline={true}
    isUpper={true}
    textType="body"
  >
    <StyledComponent
      data-component-type="text"
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-VigVT",
            "isStatic": false,
            "lastClassName": "cWksYM",
            "rules": Array [
              "
  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "

  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-VigVT",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      isInline={true}
      isUpper={true}
      textType="body"
    >
      <span
        className="cWksYM"
        data-component-type="text"
      >
        Hello, world!
      </span>
    </StyledComponent>
  </styled.span>
</Text>
`;
