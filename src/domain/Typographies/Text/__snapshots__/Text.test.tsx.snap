// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Text /> should render a non-inline text element 1`] = `
.c0 {
  font-family: 'Open Sans',Arial,sans-serif;
  font-size: 16px;
  line-height: 24px;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  color: #424F5C;
  font-weight: 400;
  display: block;
}

<class_1
  isInline={false}
>
  <Skeleton
    className=""
    isInline={false}
    skeletonOptions={
      Object {
        "shape": "line",
        "showSkeleton": false,
        "size": "large",
      }
    }
  >
    <TextComponent
      isInline={false}
      type="body"
    >
      <styled.span
        isInline={false}
        type="body"
      >
        <span
          className="c0"
          type="body"
        >
          Hello, world!
        </span>
      </styled.span>
    </TextComponent>
  </Skeleton>
</class_1>
`;

exports[`<Text /> should render a skeleton element if skeletonOptions are passed to the component 1`] = `
<class_1
  skeletonOptions={
    Object {
      "shape": "line",
      "showSkeleton": true,
    }
  }
>
  <Skeleton
    className=""
    skeletonOptions={
      Object {
        "shape": "line",
        "showSkeleton": true,
      }
    }
  >
    <span
      className="Skeleton skeleton line skeleton-large"
      style={
        Object {
          "width": undefined,
        }
      }
    >
      â€Œ
    </span>
  </Skeleton>
</class_1>
`;

exports[`<Text /> should render an element with colored text 1`] = `
.c0 {
  font-family: 'Open Sans',Arial,sans-serif;
  font-size: 16px;
  line-height: 24px;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  color: #F25749;
  font-weight: 400;
}

<class_1
  color="#F25749"
>
  <Skeleton
    className=""
    color="#F25749"
    skeletonOptions={
      Object {
        "shape": "line",
        "showSkeleton": false,
        "size": "large",
      }
    }
  >
    <TextComponent
      color="#F25749"
      isInline={true}
      type="body"
    >
      <styled.span
        color="#F25749"
        isInline={true}
        type="body"
      >
        <span
          className="c0"
          color="#F25749"
          type="body"
        >
          Hello, world!
        </span>
      </styled.span>
    </TextComponent>
  </Skeleton>
</class_1>
`;

exports[`<Text /> should render an element with heading text 1`] = `
.c0 {
  font-family: 'Open Sans',Arial,sans-serif;
  font-size: 18px;
  line-height: 24px;
  -webkit-letter-spacing: -.02em;
  -moz-letter-spacing: -.02em;
  -ms-letter-spacing: -.02em;
  letter-spacing: -.02em;
  color: #424F5C;
  font-weight: 600;
}

<class_1
  type="heading"
>
  <Skeleton
    className=""
    skeletonOptions={
      Object {
        "shape": "line",
        "showSkeleton": false,
        "size": "large",
      }
    }
    type="heading"
  >
    <TextComponent
      isInline={true}
      type="heading"
    >
      <styled.span
        isInline={true}
        type="heading"
      >
        <span
          className="c0"
          type="heading"
        >
          Hello, world!
        </span>
      </styled.span>
    </TextComponent>
  </Skeleton>
</class_1>
`;

exports[`<Text /> should render an element with heavy text 1`] = `
.c0 {
  font-family: 'Open Sans',Arial,sans-serif;
  font-size: 16px;
  line-height: 24px;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  color: #424F5C;
  font-weight: 600;
}

<class_1
  weight="heavy"
>
  <Skeleton
    className=""
    skeletonOptions={
      Object {
        "shape": "line",
        "showSkeleton": false,
        "size": "large",
      }
    }
    weight="heavy"
  >
    <TextComponent
      isInline={true}
      type="body"
      weight="heavy"
    >
      <styled.span
        isInline={true}
        type="body"
        weight="heavy"
      >
        <span
          className="c0"
          type="body"
        >
          Hello, world!
        </span>
      </styled.span>
    </TextComponent>
  </Skeleton>
</class_1>
`;

exports[`<Text /> should render an element with small text 1`] = `
.c0 {
  font-family: 'Open Sans',Arial,sans-serif;
  font-size: 14px;
  line-height: 20px;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  color: #262D33;
  font-weight: 400;
}

<class_1
  type="small"
>
  <Skeleton
    className=""
    skeletonOptions={
      Object {
        "shape": "line",
        "showSkeleton": false,
        "size": "large",
      }
    }
    type="small"
  >
    <TextComponent
      isInline={true}
      type="small"
    >
      <styled.span
        isInline={true}
        type="small"
      >
        <span
          className="c0"
          type="small"
        >
          Hello, world!
        </span>
      </styled.span>
    </TextComponent>
  </Skeleton>
</class_1>
`;

exports[`<Text /> should render an element with text 1`] = `
.c0 {
  font-family: 'Open Sans',Arial,sans-serif;
  font-size: 16px;
  line-height: 24px;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  color: #424F5C;
  font-weight: 400;
}

<class_1>
  <Skeleton
    className=""
    skeletonOptions={
      Object {
        "shape": "line",
        "showSkeleton": false,
        "size": "large",
      }
    }
  >
    <TextComponent
      isInline={true}
      type="body"
    >
      <styled.span
        isInline={true}
        type="body"
      >
        <span
          className="c0"
          type="body"
        >
          Hello, world!
        </span>
      </styled.span>
    </TextComponent>
  </Skeleton>
</class_1>
`;

exports[`<Text /> should render an element with the text converted to uppercase 1`] = `
.c0 {
  font-family: 'Open Sans',Arial,sans-serif;
  font-size: 16px;
  line-height: 24px;
  -webkit-letter-spacing: normal;
  -moz-letter-spacing: normal;
  -ms-letter-spacing: normal;
  letter-spacing: normal;
  color: #424F5C;
  font-weight: 400;
  text-transform: uppercase;
}

<class_1
  isUpper={true}
>
  <Skeleton
    className=""
    isUpper={true}
    skeletonOptions={
      Object {
        "shape": "line",
        "showSkeleton": false,
        "size": "large",
      }
    }
  >
    <TextComponent
      isInline={true}
      isUpper={true}
      type="body"
    >
      <styled.span
        isInline={true}
        isUpper={true}
        type="body"
      >
        <span
          className="c0"
          type="body"
        >
          Hello, world!
        </span>
      </styled.span>
    </TextComponent>
  </Skeleton>
</class_1>
`;
