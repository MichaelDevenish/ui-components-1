// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<CurrencyText /> should render the Currency Text 1`] = `
<CurrencyText
  decimalPlace={2}
  flexAlign={false}
  prefix="AUD"
  prefixType="body"
  value={1000.499}
  valueType="body"
>
  <styled.span
    flexAlign={false}
  >
    <StyledComponent
      flexAlign={false}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-dnqmqq",
            "isStatic": false,
            "lastClassName": "jhXmei",
            "rules": Array [
              "
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-dnqmqq",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <span
        className="jhXmei"
      >
        <Styled(Text)
          type="body"
          weight={600}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htoDjs",
                  "isStatic": true,
                  "lastClassName": "jYtsma",
                  "rules": Array [
                    "
  margin-right: 8px;
",
                  ],
                },
                "displayName": "Styled(Text)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htoDjs",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            type="body"
            weight={600}
          >
            <Text
              className="jYtsma"
              isInline={true}
              tag="span"
              type="body"
              weight={600}
            >
              <styled.span
                as="span"
                className="jYtsma"
                data-component-type="text"
                isInline={true}
                textType="body"
                weight={600}
              >
                <StyledComponent
                  as="span"
                  className="jYtsma"
                  data-component-type="text"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gzVnrw",
                        "isStatic": false,
                        "lastClassName": "ccQvFO",
                        "rules": Array [
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "
",
                        ],
                      },
                      "displayName": "styled.span",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-gzVnrw",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isInline={true}
                  textType="body"
                  weight={600}
                >
                  <span
                    className="jYtsma kbnzwI"
                    data-component-type="text"
                  >
                    AUD
                  </span>
                </StyledComponent>
              </styled.span>
            </Text>
          </StyledComponent>
        </Styled(Text)>
        <Text
          isInline={true}
          tag="span"
          type="body"
        >
          <styled.span
            as="span"
            data-component-type="text"
            isInline={true}
            textType="body"
          >
            <StyledComponent
              as="span"
              data-component-type="text"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gzVnrw",
                    "isStatic": false,
                    "lastClassName": "ccQvFO",
                    "rules": Array [
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gzVnrw",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              isInline={true}
              textType="body"
            >
              <span
                className="ccQvFO"
                data-component-type="text"
              >
                1,000.50
              </span>
            </StyledComponent>
          </styled.span>
        </Text>
      </span>
    </StyledComponent>
  </styled.span>
</CurrencyText>
`;

exports[`<CurrencyText /> should render the Currency Text with 0 as value 1`] = `
<CurrencyText
  decimalPlace={0}
  flexAlign={false}
  prefix="AUD"
  prefixType="body"
  value={0}
  valueType="body"
>
  <styled.span
    flexAlign={false}
  >
    <StyledComponent
      flexAlign={false}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-dnqmqq",
            "isStatic": false,
            "lastClassName": "jhXmei",
            "rules": Array [
              "
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-dnqmqq",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <span
        className="jhXmei"
      >
        <Styled(Text)
          type="body"
          weight={600}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htoDjs",
                  "isStatic": true,
                  "lastClassName": "jYtsma",
                  "rules": Array [
                    "
  margin-right: 8px;
",
                  ],
                },
                "displayName": "Styled(Text)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htoDjs",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            type="body"
            weight={600}
          >
            <Text
              className="jYtsma"
              isInline={true}
              tag="span"
              type="body"
              weight={600}
            >
              <styled.span
                as="span"
                className="jYtsma"
                data-component-type="text"
                isInline={true}
                textType="body"
                weight={600}
              >
                <StyledComponent
                  as="span"
                  className="jYtsma"
                  data-component-type="text"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gzVnrw",
                        "isStatic": false,
                        "lastClassName": "ccQvFO",
                        "rules": Array [
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "
",
                        ],
                      },
                      "displayName": "styled.span",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-gzVnrw",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isInline={true}
                  textType="body"
                  weight={600}
                >
                  <span
                    className="jYtsma kbnzwI"
                    data-component-type="text"
                  >
                    AUD
                  </span>
                </StyledComponent>
              </styled.span>
            </Text>
          </StyledComponent>
        </Styled(Text)>
        <Text
          isInline={true}
          tag="span"
          type="body"
        >
          <styled.span
            as="span"
            data-component-type="text"
            isInline={true}
            textType="body"
          >
            <StyledComponent
              as="span"
              data-component-type="text"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gzVnrw",
                    "isStatic": false,
                    "lastClassName": "ccQvFO",
                    "rules": Array [
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gzVnrw",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              isInline={true}
              textType="body"
            >
              <span
                className="ccQvFO"
                data-component-type="text"
              >
                0
              </span>
            </StyledComponent>
          </styled.span>
        </Text>
      </span>
    </StyledComponent>
  </styled.span>
</CurrencyText>
`;

exports[`<CurrencyText /> should render the Currency Text with a center flex align 1`] = `
<CurrencyText
  decimalPlace={0}
  flexAlign={true}
  prefix="AUD"
  prefixType="heading"
  value={1000}
  valueType="xsmall"
>
  <styled.span
    flexAlign={true}
  >
    <StyledComponent
      flexAlign={true}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-dnqmqq",
            "isStatic": false,
            "lastClassName": "fsaikI",
            "rules": Array [
              "
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-dnqmqq",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <span
        className="fsaikI"
      >
        <Styled(Text)
          type="heading"
          weight={600}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htoDjs",
                  "isStatic": true,
                  "lastClassName": "jYtsma",
                  "rules": Array [
                    "
  margin-right: 8px;
",
                  ],
                },
                "displayName": "Styled(Text)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htoDjs",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            type="heading"
            weight={600}
          >
            <Text
              className="jYtsma"
              isInline={true}
              tag="span"
              type="heading"
              weight={600}
            >
              <styled.span
                as="span"
                className="jYtsma"
                data-component-type="text"
                isInline={true}
                textType="heading"
                weight={600}
              >
                <StyledComponent
                  as="span"
                  className="jYtsma"
                  data-component-type="text"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gzVnrw",
                        "isStatic": false,
                        "lastClassName": "eIWenM",
                        "rules": Array [
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "
",
                        ],
                      },
                      "displayName": "styled.span",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-gzVnrw",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isInline={true}
                  textType="heading"
                  weight={600}
                >
                  <span
                    className="jYtsma fpUbIX"
                    data-component-type="text"
                  >
                    AUD
                  </span>
                </StyledComponent>
              </styled.span>
            </Text>
          </StyledComponent>
        </Styled(Text)>
        <Text
          isInline={true}
          tag="span"
          type="xsmall"
        >
          <styled.span
            as="span"
            data-component-type="text"
            isInline={true}
            textType="xsmall"
          >
            <StyledComponent
              as="span"
              data-component-type="text"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gzVnrw",
                    "isStatic": false,
                    "lastClassName": "eIWenM",
                    "rules": Array [
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gzVnrw",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              isInline={true}
              textType="xsmall"
            >
              <span
                className="eIWenM"
                data-component-type="text"
              >
                1,000
              </span>
            </StyledComponent>
          </styled.span>
        </Text>
      </span>
    </StyledComponent>
  </styled.span>
</CurrencyText>
`;

exports[`<CurrencyText /> should render the Currency Text with a red money color 1`] = `
<CurrencyText
  decimalPlace={0}
  flexAlign={false}
  prefix="AUD"
  prefixType="body"
  value={1000}
  valueColor="#FFD2CC"
  valueType="body"
>
  <styled.span
    flexAlign={false}
  >
    <StyledComponent
      flexAlign={false}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-dnqmqq",
            "isStatic": false,
            "lastClassName": "jhXmei",
            "rules": Array [
              "
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-dnqmqq",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <span
        className="jhXmei"
      >
        <Styled(Text)
          type="body"
          weight={600}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htoDjs",
                  "isStatic": true,
                  "lastClassName": "jYtsma",
                  "rules": Array [
                    "
  margin-right: 8px;
",
                  ],
                },
                "displayName": "Styled(Text)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htoDjs",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            type="body"
            weight={600}
          >
            <Text
              className="jYtsma"
              isInline={true}
              tag="span"
              type="body"
              weight={600}
            >
              <styled.span
                as="span"
                className="jYtsma"
                data-component-type="text"
                isInline={true}
                textType="body"
                weight={600}
              >
                <StyledComponent
                  as="span"
                  className="jYtsma"
                  data-component-type="text"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gzVnrw",
                        "isStatic": false,
                        "lastClassName": "jmxVcK",
                        "rules": Array [
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "
",
                        ],
                      },
                      "displayName": "styled.span",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-gzVnrw",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isInline={true}
                  textType="body"
                  weight={600}
                >
                  <span
                    className="jYtsma kbnzwI"
                    data-component-type="text"
                  >
                    AUD
                  </span>
                </StyledComponent>
              </styled.span>
            </Text>
          </StyledComponent>
        </Styled(Text)>
        <Text
          color="#FFD2CC"
          isInline={true}
          tag="span"
          type="body"
        >
          <styled.span
            as="span"
            color="#FFD2CC"
            data-component-type="text"
            isInline={true}
            textType="body"
          >
            <StyledComponent
              as="span"
              color="#FFD2CC"
              data-component-type="text"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gzVnrw",
                    "isStatic": false,
                    "lastClassName": "jmxVcK",
                    "rules": Array [
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gzVnrw",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              isInline={true}
              textType="body"
            >
              <span
                className="jmxVcK"
                color="#FFD2CC"
                data-component-type="text"
              >
                1,000
              </span>
            </StyledComponent>
          </styled.span>
        </Text>
      </span>
    </StyledComponent>
  </styled.span>
</CurrencyText>
`;

exports[`<CurrencyText /> should render the Currency Text with a red prefix color 1`] = `
<CurrencyText
  decimalPlace={0}
  flexAlign={false}
  prefix="AUD"
  prefixColor="#FFD2CC"
  prefixType="body"
  value={1000}
  valueType="body"
>
  <styled.span
    flexAlign={false}
  >
    <StyledComponent
      flexAlign={false}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-dnqmqq",
            "isStatic": false,
            "lastClassName": "jhXmei",
            "rules": Array [
              "
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-dnqmqq",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <span
        className="jhXmei"
      >
        <Styled(Text)
          color="#FFD2CC"
          type="body"
          weight={600}
        >
          <StyledComponent
            color="#FFD2CC"
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htoDjs",
                  "isStatic": true,
                  "lastClassName": "jYtsma",
                  "rules": Array [
                    "
  margin-right: 8px;
",
                  ],
                },
                "displayName": "Styled(Text)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htoDjs",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            type="body"
            weight={600}
          >
            <Text
              className="jYtsma"
              color="#FFD2CC"
              isInline={true}
              tag="span"
              type="body"
              weight={600}
            >
              <styled.span
                as="span"
                className="jYtsma"
                color="#FFD2CC"
                data-component-type="text"
                isInline={true}
                textType="body"
                weight={600}
              >
                <StyledComponent
                  as="span"
                  className="jYtsma"
                  color="#FFD2CC"
                  data-component-type="text"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gzVnrw",
                        "isStatic": false,
                        "lastClassName": "ccQvFO",
                        "rules": Array [
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "
",
                        ],
                      },
                      "displayName": "styled.span",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-gzVnrw",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isInline={true}
                  textType="body"
                  weight={600}
                >
                  <span
                    className="jYtsma JcdKA"
                    color="#FFD2CC"
                    data-component-type="text"
                  >
                    AUD
                  </span>
                </StyledComponent>
              </styled.span>
            </Text>
          </StyledComponent>
        </Styled(Text)>
        <Text
          isInline={true}
          tag="span"
          type="body"
        >
          <styled.span
            as="span"
            data-component-type="text"
            isInline={true}
            textType="body"
          >
            <StyledComponent
              as="span"
              data-component-type="text"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gzVnrw",
                    "isStatic": false,
                    "lastClassName": "ccQvFO",
                    "rules": Array [
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gzVnrw",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              isInline={true}
              textType="body"
            >
              <span
                className="ccQvFO"
                data-component-type="text"
              >
                1,000
              </span>
            </StyledComponent>
          </styled.span>
        </Text>
      </span>
    </StyledComponent>
  </styled.span>
</CurrencyText>
`;

exports[`<CurrencyText /> should render the Currency Text with an extra small money style 1`] = `
<CurrencyText
  decimalPlace={0}
  flexAlign={false}
  prefix="AUD"
  prefixType="body"
  value={1000}
  valueType="xsmall"
>
  <styled.span
    flexAlign={false}
  >
    <StyledComponent
      flexAlign={false}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-dnqmqq",
            "isStatic": false,
            "lastClassName": "jhXmei",
            "rules": Array [
              "
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-dnqmqq",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <span
        className="jhXmei"
      >
        <Styled(Text)
          type="body"
          weight={600}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htoDjs",
                  "isStatic": true,
                  "lastClassName": "jYtsma",
                  "rules": Array [
                    "
  margin-right: 8px;
",
                  ],
                },
                "displayName": "Styled(Text)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htoDjs",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            type="body"
            weight={600}
          >
            <Text
              className="jYtsma"
              isInline={true}
              tag="span"
              type="body"
              weight={600}
            >
              <styled.span
                as="span"
                className="jYtsma"
                data-component-type="text"
                isInline={true}
                textType="body"
                weight={600}
              >
                <StyledComponent
                  as="span"
                  className="jYtsma"
                  data-component-type="text"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gzVnrw",
                        "isStatic": false,
                        "lastClassName": "eIWenM",
                        "rules": Array [
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "
",
                        ],
                      },
                      "displayName": "styled.span",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-gzVnrw",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isInline={true}
                  textType="body"
                  weight={600}
                >
                  <span
                    className="jYtsma kbnzwI"
                    data-component-type="text"
                  >
                    AUD
                  </span>
                </StyledComponent>
              </styled.span>
            </Text>
          </StyledComponent>
        </Styled(Text)>
        <Text
          isInline={true}
          tag="span"
          type="xsmall"
        >
          <styled.span
            as="span"
            data-component-type="text"
            isInline={true}
            textType="xsmall"
          >
            <StyledComponent
              as="span"
              data-component-type="text"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gzVnrw",
                    "isStatic": false,
                    "lastClassName": "eIWenM",
                    "rules": Array [
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gzVnrw",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              isInline={true}
              textType="xsmall"
            >
              <span
                className="eIWenM"
                data-component-type="text"
              >
                1,000
              </span>
            </StyledComponent>
          </styled.span>
        </Text>
      </span>
    </StyledComponent>
  </styled.span>
</CurrencyText>
`;

exports[`<CurrencyText /> should render the Currency Text with an extra small prefix style 1`] = `
<CurrencyText
  decimalPlace={0}
  flexAlign={false}
  prefix="AUD"
  prefixType="xsmall"
  value={1000}
  valueType="body"
>
  <styled.span
    flexAlign={false}
  >
    <StyledComponent
      flexAlign={false}
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-dnqmqq",
            "isStatic": false,
            "lastClassName": "jhXmei",
            "rules": Array [
              "
  ",
              [Function],
              "
",
            ],
          },
          "displayName": "styled.span",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-dnqmqq",
          "target": "span",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <span
        className="jhXmei"
      >
        <Styled(Text)
          type="xsmall"
          weight={600}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-htoDjs",
                  "isStatic": true,
                  "lastClassName": "jYtsma",
                  "rules": Array [
                    "
  margin-right: 8px;
",
                  ],
                },
                "displayName": "Styled(Text)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-htoDjs",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            type="xsmall"
            weight={600}
          >
            <Text
              className="jYtsma"
              isInline={true}
              tag="span"
              type="xsmall"
              weight={600}
            >
              <styled.span
                as="span"
                className="jYtsma"
                data-component-type="text"
                isInline={true}
                textType="xsmall"
                weight={600}
              >
                <StyledComponent
                  as="span"
                  className="jYtsma"
                  data-component-type="text"
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "sc-gzVnrw",
                        "isStatic": false,
                        "lastClassName": "ccQvFO",
                        "rules": Array [
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "

  ",
                          [Function],
                          "
",
                        ],
                      },
                      "displayName": "styled.span",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "sc-gzVnrw",
                      "target": "span",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                  isInline={true}
                  textType="xsmall"
                  weight={600}
                >
                  <span
                    className="jYtsma hxkjuH"
                    data-component-type="text"
                  >
                    AUD
                  </span>
                </StyledComponent>
              </styled.span>
            </Text>
          </StyledComponent>
        </Styled(Text)>
        <Text
          isInline={true}
          tag="span"
          type="body"
        >
          <styled.span
            as="span"
            data-component-type="text"
            isInline={true}
            textType="body"
          >
            <StyledComponent
              as="span"
              data-component-type="text"
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-gzVnrw",
                    "isStatic": false,
                    "lastClassName": "ccQvFO",
                    "rules": Array [
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "

  ",
                      [Function],
                      "
",
                    ],
                  },
                  "displayName": "styled.span",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-gzVnrw",
                  "target": "span",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              isInline={true}
              textType="body"
            >
              <span
                className="ccQvFO"
                data-component-type="text"
              >
                1,000
              </span>
            </StyledComponent>
          </styled.span>
        </Text>
      </span>
    </StyledComponent>
  </styled.span>
</CurrencyText>
`;

exports[`<CurrencyText /> should render the Currency Text without value 1`] = `
<CurrencyText
  decimalPlace={0}
  flexAlign={false}
  prefixType="body"
  valueType="body"
>
  -
</CurrencyText>
`;
